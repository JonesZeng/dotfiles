# Start configuration added by Zim install {{{

# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------
#HOME=/Users/zenghaolun02

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}


# --------------------
# Module configuration
# --------------------

#
# completion
#

# Set a custom path for the completion dump file.
# If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
#zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

export ZIM_HOME=${HOME}/.zim
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # Update static initialization script if it does not exist or it's outdated, before sourcing it
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi

bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
# }}} End configuration added by Zim install

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
# Path to your oh-my-zsh installation.
export TERM="xterm-256color"
export ZSH="${HOME}/.oh-my-zsh"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

## ===
## === Zinit
## ===

#typeset -F4 SECONDS=0

#### Added by Zinit's installer
#if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    #print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    #command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    #command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        #print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        #print -P "%F{160}▓▒░ The clone has failed.%f%b"
#fi

#source "$HOME/.zinit/bin/zinit.zsh"
#autoload -Uz _zinit
#(( ${+_comps} )) && _comps[zinit]=_zinit

## Load a few important annexes, without Turbo
## (this is currently required for annexes)
#zinit light-mode for \
    #zinit-zsh/z-a-rust \
    #zinit-zsh/z-a-as-monitor \
    #zinit-zsh/z-a-patch-dl \
    #zinit-zsh/z-a-bin-gem-node \
		#zinit-zsh/z-a-submods \
## p10k
#zinit ice depth=1; zinit light romkatv/powerlevel10k

## Fast-syntax-highlighting & autosuggestions
#zinit wait lucid for \
 #atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
    #zdharma/fast-syntax-highlighting \
 #atload"!_zsh_autosuggest_start" \
    #zsh-users/zsh-autosuggestions \
 #blockf \
    #zsh-users/zsh-completions

### keybindings
##zinit snippet OMZ::lib/key-bindings.zsh
##zinit snippet OMZ::lib/completion.zsh
##zinit snippet OMZ::lib/history.zsh
##zinit snippet OMZ::lib/key-bindings.zsh
##zinit snippet OMZ::lib/theme-and-appearance.zsh

## lib/git.zsh is loaded mostly to stay in touch with the plugin (for the users)
## and for the themes 2 & 3 (lambda-mod-zsh-theme & lambda-gitster)
#zinit wait lucid for \
    #zdharma/zsh-unique-id \
    #OMZ::lib/git.zsh \
 #atload"unalias grv g" \
    #OMZ::plugins/git/git.plugin.zsh

## autojump+zsh-defer
#zinit light-mode for \
	#wting/autojump \
	#romkatv/zsh-defer

## Theme no. 1 - zprompts
#zinit lucid \
 #load'![[ $MYPROMPT = 1 ]]' \
 #unload'![[ $MYPROMPT != 1 ]]' \
 #atload'!promptinit; typeset -g PSSHORT=0; prompt sprint3 yellow red green blue' \
 #nocd for \
    #psprint/zprompts

### Theme no. 2 – lambda-mod-zsh-theme
##zinit lucid load'![[ $MYPROMPT = 2 ]]' unload'![[ $MYPROMPT != 2 ]]' nocd for \
    ##halfo/lambda-mod-zsh-theme

### Theme no. 3 – lambda-gitster
##zinit lucid load'![[ $MYPROMPT = 3 ]]' unload'![[ $MYPROMPT != 3 ]]' nocd for \
    ##ergenekonyigit/lambda-gitster

### Theme no. 4 – geometry
##zinit lucid load'![[ $MYPROMPT = 4 ]]' unload'![[ $MYPROMPT != 4 ]]' \
 ##atload'!geometry::prompt' nocd \
 ##atinit'GEOMETRY_COLOR_DIR=63 GEOMETRY_PATH_COLOR=63' for \
    ##geometry-zsh/geometry

### Theme no. 5 – pure
##zinit lucid load'![[ $MYPROMPT = 5 ]]' unload'![[ $MYPROMPT != 5 ]]' \
 ##pick"/dev/null" multisrc"{async,pure}.zsh" atload'!prompt_pure_precmd' nocd for \
    ##sindresorhus/pure

### Theme no. 6 - agkozak-zsh-theme
##zinit lucid load'![[ $MYPROMPT = 6 ]]' unload'![[ $MYPROMPT != 6 ]]' \
 ##atload'!_agkozak_precmd' nocd atinit'AGKOZAK_FORCE_ASYNC_METHOD=subst-async' for \
    ##agkozak/agkozak-zsh-theme

### Theme no. 7 - zinc
##zinit load'![[ $MYPROMPT = 7 ]]' unload'![[ $MYPROMPT != 7 ]]' \
 ##compile"{zinc_functions/*,segments/*,zinc.zsh}" nocompletions \
 ##atload'!prompt_zinc_setup; prompt_zinc_precmd' nocd for \
    ##robobenklein/zinc

### Theme no. 8 - git-prompt
##zinit lucid load'![[ $MYPROMPT = 8 ]]' unload'![[ $MYPROMPT != 8 ]]' \
 ##atload'!_zsh_git_prompt_precmd_hook' nocd for \
    ##woefe/git-prompt.zsh

## zunit, color
#zinit wait"2" lucid as"null" for \
 #sbin atclone"./build.zsh" atpull"%atclone" \
		#molovo/zunit \
 #sbin"color.zsh -> color" \
		#molovo/color

## revolver
#zinit wait"2" lucid as"program" pick"revolver" for psprint/revolver

#zinit pack for dircolors-material

## Zconvey shell integration plugin
#zinit wait lucid \
 #sbin"cmds/zc-bg-notify" sbin"cmds/plg-zsh-notify" for \
    #zdharma/zconvey

## zsh-startify, a vim-startify like plugin
#: zinit wait"0b" lucid atload"zsh-startify" for zdharma/zsh-startify
#: zinit wait lucid pick"manydots-magic" compile"manydots-magic" for knu/zsh-manydots-magic

## remark
#zinit pack for remark

## zsh-autopair
## fzf-marks, at slot 0, for quick Ctrl-G accessibility
#zinit wait lucid for \
    #hlissner/zsh-autopair \
    #urbainvaes/fzf-marks

## A few wait"1 plugins
#zinit wait"1" lucid for \
    #psprint/zsh-navigation-tools \
 #atinit'zstyle ":history-search-multi-word" page-size "7"' \
    #zdharma/history-search-multi-word \
 #atinit"local zew_word_style=whitespace" \
    #psprint/zsh-editing-workbench

### Github-Issue-Tracker – the notifier thread
##zinit lucid id-as"GitHub-notify" \
 ##on-update-of'~/.cache/zsh-github-issues/new_titles.log' \
 ##notify'New issue: $NOTIFY_MESSAGE' for \
    ##zdharma/zsh-github-issues

### Github-Issue-Tracker – the issue-puller thread
##GIT_SLEEP_TIME=700
##GIT_PROJECTS=zdharma/zsh-github-issues:zdharma/zinit

##zinit wait"2" lucid service"GIT" \
 ##pick"zsh-github-issues.service.zsh" for \
    ##zdharma/zsh-github-issues

## Gitignore plugin – commands gii and gi
#zinit wait"2" lucid trigger-load'!gi;!gii' \
 #dl'https://gist.githubusercontent.com/psprint/1f4d0a3cb89d68d3256615f247e2aac9/raw -> templates/Zsh.gitignore' \
 #for \
    #voronkovich/gitignore.plugin.zsh

## F-Sy-H automatic themes – available for patrons
## https://patreon.com/psprint
#: zinit wait"1" lucid from"psprint@gitlab.com" for psprint/fsh-auto-themes

## ogham/exa, sharkdp/fd, fzf
#zinit wait"2" lucid as"null" from"gh-r" for \
    #mv"exa* -> exa" sbin  ogham/exa \
    #mv"fd* -> fd" sbin"fd/fd"  @sharkdp/fd

## fzf, fzy
#zinit pack"bgn-binary" for fzf
#zinit pack"bgn" for fzy

## A few wait'2' plugins
#zinit wait"2" lucid for \
    #zdharma/declare-zsh \
    #zdharma/zflai \
 #blockf \
    #zdharma/zui \
    #zinit-zsh/zinit-console \
 #trigger-load'!crasis' \
    #zdharma/zinit-crasis \
 #atinit"forgit_ignore='fgi'" \
    #wfxr/forgit

## git-cal
#zinit wait"2" lucid as"null" \
 #atclone'perl Makefile.PL PREFIX=$ZPFX' \
 #atpull'%atclone' make sbin"git-cal" for \
    #k4rthik/git-cal

## A few wait'3' git extensions
#zinit as"null" wait"3" lucid for \
		#sbin paulirish/git-open \
		#sbin paulirish/git-recent \
		#sbin davidosomething/git-my \
		#sbin atload"export _MENU_THEME=legacy" \
				#arzzen/git-quick-stats \
		#sbin iwata/git-now \
		#make"PREFIX=$ZPFX"         tj/git-extras \
		#sbin"bin/git-dsf;bin/diff-so-fancy" zdharma/zsh-diff-so-fancy \
		#sbin"git-url;git-guclone" make"GITURL_NO_CGITURL=1" zdharma/git-url

## fbterm
#: zinit wait"3" lucid as"command" \
 #pick"$ZPFX/bin/fbterm" \
 #dl"https://bugs.archlinux.org/task/46860?getfile=13513 -> ins.patch" \
 #dl"https://aur.archlinux.org/cgit/aur.git/plain/0001-Fix-build-with-gcc-6.patch?h=fbterm-git" \
 #patch"ins.patch; 0001-Fix-build-with-gcc-6.patch" \
 #atclone"./configure --prefix=$ZPFX" \
 #atpull"%atclone" \
 #make"install" reset for \
		#izmntuk/fbterm

## asciinema
#: zinit wait lucid as"command" \
 #atinit"export PYTHONPATH=$ZPFX/lib/python3.7/site-packages/" \
 #atclone"PYTHONPATH=$ZPFX/lib/python3.7/site-packages/ \
 #python3 setup.py --quiet install --prefix $ZPFX" \
 #atpull'%atclone' test'0' \
 #pick"$ZPFX/bin/asciinema" for \
    #asciinema/asciinema

## Notifications, configured to use zconvey
#: zinit wait lucid for marzocchi/zsh-notify

## zflai
## function that logs zinit's loading time
#typeset -ga mylogs
#zflai-msg() { mylogs+=( "$1" ); }
#zflai-assert() { mylogs+=( "$4"${${${1:#$2}:+FAIL}:-OK}": $3" ); }
	##zinit ice wait lucid atload"source $ZDOTDIR/keybinds.zsh; source $ZDOTDIR/aliasesNfunctions.zsh; source $ZDOTDIR/options.zsh"
	#zinit load zdharma/null
#zflai-msg "[zshrc] Zplugin block took ${(M)$(( SECONDS * 1000 ))#*.?} ms"

#MYPROMPT=1

##
## Zstyles & other
##

#zle -N znt-kill-widget
#bindkey "^Y" znt-kill-widget

#cdpath=( "$HOME" "$HOME/github" "$HOME/github2" "$HOME/gitlab" )

#zstyle ':completion:*:*:kill:*' menu yes select
#zstyle ':completion:*:kill:*'   force-list always
#zstyle ":completion:*:descriptions" format "%B%d%b"
#zstyle ':completion:*:*:*:default' menu yes select search
#zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”


#### End of Zinit's installer chunk

# === zplug
# export ZPLUG_HOME=${HOME}/.zplug
# source ~/.zplug/init.zsh

# History# config
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# ===
# === zplug plugins
# ===

# basic plug for zsh
# zplug "romkatv/powerlevel10k", as:theme, depth:1
# zplug 'zplug/zplug', hook-build:'zplug --self-manage'
# for editor
# zplug "zsh-users/zsh-completions"
# zplug "zsh-users/zsh-history-substring-search"
# zplug "zsh-users/zsh-autosuggestions"
# zplug "zsh-users/zsh-syntax-highlighting"
# zplug "zsh-users/zsh-autosuggestions"
# zplug "zsh-users/zsh-history-substring-search"
# zplug "zdharma/fast-syntax-highlighting"
# # tools in zsh
# zplug "rimraf/k"
# zplug "zpm-zsh/ls"
# zplug "hchbaw/auto-fu.zsh"
# zplug "plugins/colored-man-pages", from:oh-my-zsh
# zplug "plugins/docker", from:oh-my-zsh
# zplug "plugins/composer", from:oh-my-zsh
# zplug "plugins/extract", from:oh-my-zsh
# zplug "plugins/autojump", from:oh-my-zsh
# zplug "lib/completion", from:oh-my-zsh
# zplug "plugins/sudo", from:oh-my-zsh
# zplug "b4b4r07/enhancd", use:init.sh
#
# zplug "plugins/colored-man-pages", from:oh-my-zsh
# zplug "plugins/colorize", from:oh-my-zsh
# zplug "plugins/command-not-found", from:oh-my-zsh
# zplug "plugins/cp", from:oh-my-zsh
# zplug "plugins/gem", from:oh-my-zsh
# zplug "plugins/git", from:oh-my-zsh
# zplug "plugins/github", from:oh-my-zsh
# zplug "plugins/gitignore", from:oh-my-zsh
# zplug "plugins/git-prompt", from:oh-my-zsh
# zplug "plugins/man", from:oh-my-zsh
# zplug "plugins/npm", from:oh-my-zsh
# zplug "plugins/nvm", from:oh-my-zsh
# zplug "plugins/pip", from:oh-my-zsh
# zplug "plugins/rbenv", from:oh-my-zsh
# zplug "plugins/ruby", from:oh-my-zsh
# zplug "plugins/tmux", from:oh-my-zsh
# zplug "plugins/ubuntu", from:oh-my-zsh
#
# zplug "romkatv/zsh-defer"
#
# zplug "junegunn/fzf"
# # zplug "junegunn/fzf-bin", \
		# from:gh-r, \
		# as:command, \
		# rename-to:fzf, \
		# use:"*linux*amd64*"
#
# if zplug check b4b4r07/enhancd; then
		# export ENHANCD_FILTER=fzf-tmux
# fi
#
# source $ZPLUG_HOME/repos/junegunn/fzf/shell/completion.zsh
# source $ZPLUG_HOME/repos/junegunn/fzf/shell/key-bindings.zsh
#
# # Install packages that have not been installed yet
# if ! zplug check --verbose; then
		# printf "Install? [y/N]: "
		# if read -q; then
				# echo; zplug install
		# else
				# echo
		# fi
# fi
# zplug load

#source $ZSH/oh-my-zsh.sh

# User configuration


# ===
# Recommend config
# ===
#color{{{
autoload colors
colors

for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}'
eval $color='%{$fg[${(L)color}]%}'
(( count = $count + 1 ))
done
FINISH="%{$terminfo[sgr0]%}"
#}}}


#命令提示符
#RPROMPT=$(echo "$RED%D %T$FINISH")
#PROMPT=$(echo "$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW>$FINISH ")


#PROMPT=$(echo "$BLUE%M$GREEN%/
#$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW>>>$FINISH ")
#标题栏、任务栏样式{{{
case $TERM in (*xterm*|*rxvt*|(dt|k|E)term)
precmd () { print -Pn "\e]0;%n@%M//%/\a" }
preexec () { print -Pn "\e]0;%n@%M//%/\ $1\a" }
;;
esac
#}}}




#关于历史纪录的配置 {{{
#历史纪录条目数量
export HISTSIZE=10000
#注销后保存的历史纪录条目数量
export SAVEHIST=10000
#历史纪录文件
export HISTFILE=~/.zsh_history
#以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
#如果连续输入的命令相同，历史纪录中只保留一个
setopt HIST_IGNORE_DUPS
#为历史纪录中的命令添加时间戳
setopt EXTENDED_HISTORY

#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
#相同的历史路径只保留一个
setopt PUSHD_IGNORE_DUPS

#在命令前添加空格，不将此命令添加到纪录文件中
#setopt HIST_IGNORE_SPACE
#}}}

# 补全{{{
#彩色补全菜单
# eval $(dircolors -b)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
#错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
#}}}


##行编辑高亮模式 {{{
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
special:bold      #特殊字符
isearch:underline)#搜索时使用的关键字
#}}}

##空行(光标在行首)补全 "cd " {{{
user-complete(){
case $BUFFER in
"" )                       # 空行填入 "cd "
BUFFER="cd "
zle end-of-line
zle expand-or-complete
;;
"cd --" )                  # "cd --" 替换为 "cd +"
BUFFER="cd +"
zle end-of-line
zle expand-or-complete
;;
"cd +-" )                  # "cd +-" 替换为 "cd -"
BUFFER="cd -"
zle end-of-line
zle expand-or-complete
;;
* )
zle expand-or-complete
;;
esac
}
zle -N user-complete
bindkey "\t" user-complete
#}}}



#命令别名 {{{
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias ls='ls -F -G'
alias ll='ls -l -G'
alias grep='grep -G'
alias la='ls -a'
alias pacman='pacman -G'
alias yay='yay -G'
#}}}


#漂亮又实用的命令高亮界面
setopt extended_glob
TOKENS_FOLLOWED_BY_COMMANDS=('|' '||' ';' '&' '&&' 'sudo' 'do' 'time' 'strace')


recolor-cmd() {
region_highlight=()
colorize=true
start_pos=0
for arg in ${(z)BUFFER}; do
((start_pos+=${#BUFFER[$start_pos+1,-1]}-${#${BUFFER[$start_pos+1,-1]## #}}))
((end_pos=$start_pos+${#arg}))
if $colorize; then
colorize=false
res=$(LC_ALL=C builtin type $arg 2>/dev/null)
case $res in
*'reserved word'*)   style="fg=magenta,bold";;
*'alias for'*)       style="fg=cyan,bold";;
*'shell builtin'*)   style="fg=yellow,bold";;
*'shell function'*)  style='fg=green,bold';;
*"$arg is"*)
[[ $arg = 'sudo' ]] && style="fg=red,bold" || style="fg=blue,bold";;
*)                   style='none,bold';;
esac
region_highlight+=("$start_pos $end_pos $style")
fi
[[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\|}]}:+yes} = 'yes' ]] && colorize=true
start_pos=$end_pos
done
}
check-cmd-self-insert() { zle .self-insert && recolor-cmd }
check-cmd-backward-delete-char() { zle .backward-delete-char && recolor-cmd }

zle -N self-insert check-cmd-self-insert
zle -N backward-delete-char check-cmd-backward-delete-char

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

#Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='nvim'
 else
   export EDITOR='vim'
 fi

# Example aliases
alias zshconfig="ci ~/.zshrc"
alias ohmyzsh="ci ~/.oh-my-zsh"

 #>>> conda initialize >>>
 #!! Contents within this block are managed by 'conda init' !!
 if [ $? -eq 0 ]; then
	 eval "$__conda_setup"
 else
	 if [ -f "${HOME}/opt/miniconda3/etc/profile.d/conda.sh" ]; then
# . "${HOME}/opt/miniconda3/etc/profile.d/conda.sh"  # commented out by conda initialize  # commented out by conda initialize
	 else
# export PATH="${HOME}/opt/miniconda3/bin:$PATH"  # commented out by conda initialize  # commented out by conda initialize
	 fi
 fi
 unset __conda_setup

######################################
# System
######################################
# System Config
export CONFIG_HOME=~/.config
export CONFIG_XKEYSNAIL_HOME=${CONFIG_HOME}/xkeysnail
export CONFIG_I3_HOME=${HOME}/.i3

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig

alias zsh-vim='nvim ~/.zshrc'
alias nvim-vim='nvim ~/.config/nvim/init.vim'
alias i3-vim='nvim ~/.i3/config'
alias xkey-vim='nvim {CONFIG_XKEYSNAIL_HOME}/config.py'
alias tmux='tmux -u'
# Network
#export ALL_PROXY=http://127.0.0.1:12333

# Homebrew
if [[ `uname` == 'Darwin' ]]; then
	HOMEBREW_HOME=/opt/homebrew
elif [[ `uname` == 'Linux' ]]; then
	HOMEBREW_HOME=/home/linuxbrew/.linuxbrew
else 
	HOMEBREW_HOME=~
fi
export PATH=${HOMEBREW_HOME}/bin:$PATH

# ===
# VIM
# ===
export PATH=${HOME}/.npm-global/bin:$PATH

# ===
# === fzf
# ===
export FZF_DEFAULT_COMMAND="fd --exclude={.git,.idea,.vscode,.sass-cache,node_module} --type f"
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {})2>/dev/null | head -500'"

######################################
# Opt
######################################

# TVM(multi version)
######################################
export TVM_HOME=$HOME/Projects/tvm
export PYTHONPATH=$TVM_HOME/python:$TVM_HOME/topi/python:${PYTHONPATH}


######################################
# cuda (multi version)
######################################d
export CUDA_HOME=/usr/local/cuda
export PATH=$PATH:${CUDA_HOME}/bin
export LD_LIBRARY_PATH=${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export CUDADIR=${CUDA_HOME}

######################################
# stuff
######################################
export BLOG_HOME=${PROJECT_HOME}/Blog
export BLOG_POST=${BLOG_HOME}/source/_posts
export BLOG_CDN=${BLOG_HOME}/CDN-blog


export DOCKER_IMG=${HOME}/var/lib/docker
export DOCKER_HOME=${PROJECT}/docker
export DOCKER_EXAMPLE=${DOCKER_HOME}/docker-examples


######################################
# texlive 2019
######################################
export MANPATH=${MANPATH}:/usr/local/texlive/2019/texmf-dist/doc/man
export INFOPATH=${INFOPATH}:/usr/local/texlive/2019/texmf-dist/doc/info
export PATH=${PATH}:/usr/local/texlive/2019/bin/x86_64-linux

######################################
# QT5
######################################
#QT_DEBUG_PLUGINS=1

######################################
# C/C++
######################################
export C_INCLUDE_PATH=/usr/include/opencv4${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}
export C_INCLUDE_PATH=${LN_HOME}/src${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}
export CPLUS_INCLUDE_PATH=/usr/include/opencv4${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH}
export CPLUS_INCLUDE_PATH=${LN_HOME}/src${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH}
export COREDUMP_HOME=${HOME}/Documents/CoreDump

# export NVM_DIR="$HOME/.nvm"
# zsh-defer -c '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'  # This loads nvm
# zsh-defer -c '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"'  # This loads nvm bash_completion

###############################################################
# system I/O
kill-batch()
{
    if [ $1 ]
    then
        program_name=$1
    else
        echo " === Input Program Name Below === "
        read program_name
    fi
    ps aux | grep ${program_name} | awk '{print $2}' | xargs kill -9

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
# fasd
eval "$(fasd --init auto)"

# manasiV1
#export GIT_SSL_NO_VERIFY=1
#export TVM_LOG_DEBUG="ir/transform.cc=1;relay/ir/transform.cc=1"
#export TVM_HOME=${HOME}/Documents/Projects/HPU_TVM

#export PYTHONPATH=$TVM_HOME/python:${PYTHONPATH}

# === Tsinghua Homebrew
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"

# === c/cpp in macos
if [[ `uname` == 'Darwin' ]]; then
    export CPLUS_INCLUDE_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1:$CPLUS_INCLUDE_PATH
fi
export C_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:${C_INCLUDE_PATH}

# === OTM
export PATH=${HOME}/Scripts:${PATH}

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/zenghaolun02/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/zenghaolun02/opt/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/zenghaolun02/opt/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/zenghaolun02/opt/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


# === source Alias
[ -f ~/.zsh_alias ] && source ~/.zsh_alias

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
